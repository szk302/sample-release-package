name: Create Release PR

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version type'
        type: choice
        options:
          - auto
          - patch
          - minor
          - major

jobs:
  create-release-pr:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Setup Node.js
        uses: actions/setup-node@2028fbc5c25fe9cf00d9f06a71cc4710d4507903 # v6.0.0
        with:
          node-version: '22.14.0'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        if: ${{ github.event.inputs.version_type == 'auto' }}
        run: npm ci

      - name: Set git config
        run: |
          git remote set-url origin "https://x-access-token:${GH_TOKEN}@github.com/${GITHUB_REPOSITORY}.git"
        env:
          GH_TOKEN: ${{ github.token }}
          GITHUB_REPOSITORY: ${{ github.repository }}

      - name: Update version with semantic-release
        id: update-version-with-semantic-release
        if: ${{ github.event.inputs.version_type == 'auto' }}
        run: |
          git branch
          npm run release

      - name: Remove git config
        if: always()
        run: |
          git remote rm origin

      - name: Update version with npm version
        id: update-version-with-npm-version
        if: ${{ github.event.inputs.version_type != 'auto' }}
        run: |
          npm version "$VERSION_TYPE" --no-git-tag-version
        env:
          VERSION_TYPE: ${{ github.event.inputs.version_type }}

      # No need to install dependencies - npm version works without them
      - name: Get version
        id: version
        run: |
          VERSION=$(jq -r '.version' package.json)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Get release notes
        id: release-notes
        run: |
          # Get the default branch
          DEFAULT_BRANCH=$(gh api "repos/$GITHUB_REPOSITORY" --jq '.default_branch')

          # Get the latest release tag using GitHub API
          # Use the exit code to determine if a release exists
          if LAST_TAG=$(gh api "repos/$GITHUB_REPOSITORY/releases/latest" --jq '.tag_name' 2>/dev/null); then
            echo "Previous release found: $LAST_TAG"
          else
            LAST_TAG=""
            echo "No previous releases found - this will be the first release"
          fi

          # Generate release notes - only include previous_tag_name if we have a valid previous tag
          echo "Generating release notes for tag: v$VERSION"
          if [ -n "$LAST_TAG" ]; then
            echo "Using previous tag: $LAST_TAG"
            RELEASE_NOTES=$(gh api \
              --method POST \
              -H "Accept: application/vnd.github+json" \
              "/repos/$GITHUB_REPOSITORY/releases/generate-notes" \
              -f "tag_name=v$VERSION" \
              -f "target_commitish=$DEFAULT_BRANCH" \
              -f "previous_tag_name=$LAST_TAG" \
              --jq '.body')
          else
            echo "Generating notes from all commits"
            RELEASE_NOTES=$(gh api \
              --method POST \
              -H "Accept: application/vnd.github+json" \
              "/repos/$GITHUB_REPOSITORY/releases/generate-notes" \
              -f "tag_name=v$VERSION" \
              -f "target_commitish=$DEFAULT_BRANCH" \
              --jq '.body')
          fi

          # Set release notes as environment variable
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
          echo "$RELEASE_NOTES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        env:
          GH_TOKEN: ${{ github.token }}
          VERSION: ${{ steps.version.outputs.version }}
          GITHUB_REPOSITORY: ${{ github.repository }}

      - name: Commit version bump
        run: |
          git add .
          git commit -m "chore: release v$VERSION"
        env:
          VERSION: ${{ steps.version.outputs.version }}

      - name: Push branch
        run: |
          git push -u "https://x-access-token:${GH_TOKEN}@github.com/${GITHUB_REPOSITORY}.git" "HEAD:release/v$VERSION"
        env:
          VERSION: ${{ steps.version.outputs.version }}
          GH_TOKEN: ${{ github.token }}
          GITHUB_REPOSITORY: ${{ github.repository }}

      - name: Create Pull Request
        run: |
          echo "$RELEASE_NOTES" | gh pr create \
            --title "Release v$VERSION" \
            --body-file - \
            --base "$BASE_BRANCH" \
            --head "release/v$VERSION" \
            --label "Type: Release" \
            --assignee "$ACTOR" \
            --draft
        env:
          GH_TOKEN: ${{ github.token }}
          VERSION: ${{ steps.version.outputs.version }}
          BASE_BRANCH: ${{ github.ref_name }}
          ACTOR: ${{ github.actor }}
